############################################################
7_matplotlibIntroduction Solutions:

def ex2(path):
    data = np.load(path)
    number_data_points = np.shape(data)[0]
    x_coordinates = np.arange(number_data_points)  # 0 1 2 3 ... 23
    y_coordinates = data

    # initialize the figure with 3 rows and 1 column of subplots. Start with subplot 1
    figure, axes = plt.subplots(figsize=(10, 5), nrows=1, ncols=2)
    ax1 = axes[0]
    ax2 = axes[1]

    # Subplot 1--------------------------------------------------------------------------------
    # ax.plot(x_points, y_points, --options--)
    ax1.plot(x_coordinates, y_coordinates, color='skyblue')
    ax1.set(xlabel='race', ylabel='time (s)', title='60m Dash Race Progression')
    ax1.grid()  # add a grid to the graph if you want

    # Subplot 2--------------------------------------------------------------------------------
    n, b, p, = ax2.hist(data, bins=10, color='skyblue')
    ax2.set(xlabel='race times (s)', ylabel='frequency of each time', title='60m Dash Histogram')

    figure.tight_layout(pad=1.5)
    #plt.show()
    plt.close()
    return x_coordinates, y_coordinates, n

checkSolutions['example2'](ex2, data_path)



def ex3(path):
    data = np.load(path)
    number_data_points = np.shape(data)[0]
    x_coordinates_top = np.arange(number_data_points/2)  # 0 1 2 3 ... 11
    y_coordinates_top = data[0:12]
    x_coordinates_bottom = np.arange(number_data_points/2)
    y_coordinates_bottom = data[12:]

    # initialize the figure with 3 rows and 1 column of subplots. Start with subplot 1
    figure, axes = plt.subplots(figsize=(8, 8), nrows=2, ncols=2)
    ax1 = axes[0][0]
    ax2 = axes[0][1]
    ax3 = axes[1][0]
    ax4 = axes[1][1]

    # Subplot 1--------------------------------------------------------------------------------
    # ax.plot(x_points, y_points, --options--)
    ax1.plot(x_coordinates_top, y_coordinates_top, color='skyblue')
    ax1.set(xlabel='race', ylabel='time (s)', title='60m Dash Race Progression first 12')
    ax1.grid()  # add a grid to the graph if you want

    # Subplot 2--------------------------------------------------------------------------------
    n_top, b, p, = ax2.hist(data[0:12], bins=6, color='skyblue')
    ax2.set(xlabel='race times (s)', ylabel='frequency of each time', title='60m Dash Histogram first 12')

    # Subplot 3--------------------------------------------------------------------------------
    # ax.plot(x_points, y_points, --options--)
    ax3.plot(x_coordinates_bottom, y_coordinates_bottom, color='skyblue')
    ax3.set(xlabel='race', ylabel='time (s)', title='60m Dash Race Progression second 12')
    ax3.grid()  # add a grid to the graph if you want

    # Subplot 4--------------------------------------------------------------------------------
    n_bottom, b, p, = ax4.hist(data[12:], bins=6, color='skyblue')
    ax4.set(xlabel='race times (s)', ylabel='frequency of each time', title='60m Dash Histogram second 12')

    figure.tight_layout(pad=1.5)
    #plt.show()
    plt.close()
    return (x_coordinates_top, y_coordinates_top, n_top, x_coordinates_bottom, y_coordinates_bottom, n_bottom)

checkSolutions['example3'](ex3, data_path)



def ex4(path):
    data = np.load(path)
    number_data_points = np.shape(data)[0]
    x_coordinates_red = np.arange(number_data_points/2)  # 0 1 2 3 ... 11
    y_coordinates_red = data[0:12]
    x_coordinates_blue = np.arange(number_data_points/2)
    y_coordinates_blue = data[12:]

    # initialize the figure with 3 rows and 1 column of subplots. Start with subplot 1
    figure, axes = plt.subplots(figsize=(10, 5), nrows=1, ncols=2)
    ax1 = axes[0]
    ax2 = axes[1]

    # Subplot 1--------------------------------------------------------------------------------
    # ax.plot(x_points, y_points, --options--)
    ax1.plot(x_coordinates_red, y_coordinates_red, color='red', label='first 12')
    ax1.plot(x_coordinates_blue, y_coordinates_blue, color='blue', label='second 12')
    ax1.legend()
    ax1.set(xlabel='race', ylabel='time (s)', title='60m Dash Race Progression')
    ax1.grid()  # add a grid to the graph if you want

    # Subplot 2--------------------------------------------------------------------------------
    n_red, b, p, = ax2.hist(data[0:12], bins=5, color='red', alpha=.3, label='first 12')
    n_blue, b, p, = ax2.hist(data[12:], bins=5, color='blue', alpha=.3, label='second 12')
    ax2.legend()
    ax2.set(xlabel='race times (s)', ylabel='frequency of each time', title='60m Dash Histogram')


    figure.tight_layout(pad=1.5)
    #plt.show()
    plt.close()
    return (x_coordinates_red, y_coordinates_red, n_red, x_coordinates_blue, y_coordinates_blue, n_blue)

checkSolutions['example4'](ex4, data_path)

############################################################

cumulativeProject2

def sigmoid(x, B, alpha):
    return 1 / (1 + np.exp(-B*(x-alpha)))

checkSolutions['project2p1'](sigmoid, 2, 10, 1)


def test_sigmoid(sigmoid, start, end, step_size, B, alpha):
    list_x = []
    list_y = []
    for i in np.arange(start, end, step_size):
        list_x.append(i)
        list_y.append(sigmoid(i, B, alpha))
    plt.plot(list_x, list_y)
    #plt.show()
    plt.close()
    return list_x, list_y

checkSolutions['project2p2'](test_sigmoid, sigmoid, start=-5, end=5, step_size=.01, B=3, alpha=1)



def bandpass_filter(B, alpha1, alpha2):
    return lambda x: sigmoid(x, B, alpha1) - sigmoid(x, B, alpha2)
bpf = bandpass_filter(10, 2, 6)  # instantiation of a bandpass_filter

def createXY_bpf(bpf, start, end, step_size):
    list_x = []
    list_y = []
    for i in np.arange(start, end, step_size):
        list_x.append(i)
        list_y.append(bpf(i))
    return list_x, list_y

checkSolutions['project2p3a'](createXY_bpf, bpf, -5, 10, .01)

def sweepCutoff(b_vals, alpha1, alpha2, start, end, step_size):
    all_XY = []
    figure, axes = plt.subplots(figsize=(10, 2), nrows=1, ncols=len(b_vals))
    for i, b in enumerate(b_vals):
        bpf = bandpass_filter(b, alpha1, alpha2)
        x, y = createXY_bpf(bpf, start, end, step_size)
        axes[i].plot(x, y)
        all_XY.append((x, y))
    figure.tight_layout(pad=.5)
    #plt.savefig("../solutions/8_cumulativeProject2SolutionsImages/sweepCutoffSolution.png")
    plt.show()
    plt.close()

    return all_XY

b_vals = [.5, 1, 5, 10, 20]
checkSolutions['project2p3b'](sweepCutoff, b_vals, 2, 6, -10, 15, .01)


############################################################
dictionaries

def ex8():
    track_dict = ex7()

    x_brian = np.arange(12)
    y_brian = track_dict["brian_damore"]
    x_antoine = np.arange(12)
    y_antoine = track_dict["antoine_harris"]
    x_tyler = np.arange(12)
    y_tyler = track_dict["tyler_hanson"]
    x_alex = np.arange(12)
    y_alex = track_dict["alex_rus"]

    figure, axes = plt.subplots(figsize=(10, 10), nrows=2, ncols=2)

    ax1 = axes[0][0]
    ax2 = axes[0][1]
    ax3 = axes[1][0]
    ax4 = axes[1][1]

    # Subplot 1 Brian--------------------------------------------------------------------------------
    ax1.plot(x_brian, y_brian)
    ax1.set(xlabel='race', ylabel='time (s)', title='Brian 200m Dash Race Progression')
    ax1.grid()  # add a grid to the graph if you want

    # Subplot 2 Antoine------------------------------------------------------------------------------
    ax2.plot(x_antoine, y_antoine)
    ax2.set(xlabel='race', ylabel='time (s)', title='Antoine 200m Dash Race Progression')
    ax2.grid()  # add a grid to the graph if you want

    # Subplot 3 Tyler--------------------------------------------------------------------------------
    ax3.plot(x_tyler, y_tyler)
    ax3.set(xlabel='race', ylabel='time (s)', title='Tyler 200m Dash Race Progression')
    ax3.grid()  # add a grid to the graph if you want

    # Subplot 4 Alex---------------------------------------------------------------------------------
    ax4.plot(x_alex, y_alex)
    ax4.set(xlabel='race', ylabel='time (s)', title='Rus 200m Dash Race Progression')
    ax4.grid()  # add a grid to the graph if you want

    figure.tight_layout(pad=1.5)
    plt.show()
    plt.close()
    return (x_brian, y_brian, x_antoine, y_antoine, x_tyler, y_tyler, x_alex, y_alex)


############################################################

10_listComplex

def ex7():
    labels = ['10 elements', '20 elements', '30 elements', '40 elements', '50 elements']
    bubble_sort_means = [ex6(ex3(10))[1], ex6(ex3(20))[1], ex6(ex3(30))[1], ex6(ex3(40))[1], ex6(ex3(50))[1]]
    selection_sort = [ex5(ex3(10))[1], ex5(ex3(20))[1], ex5(ex3(30))[1], ex5(ex3(40))[1], ex5(ex3(50))[1]]

    x = np.arange(len(labels))  # the label locations
    width = 0.35  # the width of the bars

    figure, ax = plt.subplots(figsize=(9, 8))
    rects1 = ax.bar(x - width / 2, bubble_sort_means, width, label='Bubble Sort')
    rects2 = ax.bar(x + width / 2, selection_sort, width, label='Selection Sort')

    # Add some text for labels, title and custom x-axis tick labels, etc.
    ax.set_ylabel('Average Number of Elements Visited')
    ax.set_title('Bubble Sort vs Selection Sort')
    ax.set_xticks(x)
    ax.set_xticklabels(labels)
    ax.legend()

    def autolabel(rects):
        for rect in rects:
            height = rect.get_height()
            ax.annotate('{}'.format(height),
                        xy=(rect.get_x() + rect.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom')

    autolabel(rects1)
    autolabel(rects2)

    figure.tight_layout()
    plt.savefig("../solutions/10_listComplexSolutionImages/example7.png")
    #plt.show()

    return selection_sort

############################################################

Project 3


def createBoard():
    gb = [["-", "-", "-"], ["-", "-", "-"], ["-", "-", "-"]]
    return gb

checkSolutions['project3p1a'](createBoard)


def printGameBaord(gb):
    for row in gb:
        for i in range(len(row)):
            if i < len(row)-1:
                print(" " + row[i] + " |", end='')
            else:
                print(" " + row[i])


def getUserInput():
    print("Input Row: ", end="")
    row = input()
    print("Input Column: ", end="")
    column = input()
    return int(row), int(column)

checkSolutions['project3p2a'](getUserInput)


def userTurn(gb):
    invalid_entry = True
    while(invalid_entry):
        invalid_entry = False
        row, column = getUserInput()
        if row < 1 or row > 3 or column < 1 or column > 3 or gb[row-1][column-1] != "-":
            print("Invalid Entry, Try again")
            invalid_entry = True
    return row, column

checkSolutions['project3p2b'](userTurn, createBoard())


def markBoardUser(gb):
    row, column = userTurn(gb)
    gb[row-1][column-1] = "O"

checkSolutions['project3p3'](markBoardUser, createBoard())


'''
Do Not Edit: CPU Game Play
'''
def markBoardCPU(gb):
    def row_sum(pgb, row):
        sum = np.sum(pgb[row])
        if sum == 4:
            sum = 8
        if sum == 6:
            sum = 12
        if sum == 5:
            sum = 1
        return sum
    def column_sum(pgb, col):
        sum = np.sum(pgb.T[col])
        if sum == 4:
            sum = 8
        if sum == 6:
            sum = 12
        if sum == 5:
            sum = 1
        return sum
    def back_horiz(pgb):
        sum = pgb[0][0] + pgb[1][1] + pgb[2][2]
        if sum == 4:
            sum = 8
        if sum == 6:
            sum = 12
        if sum == 5:
            sum = 1
        #if sum == 3 and pgb[2][0] == 2 and pgb[0][2] == 2:
        #    sum = 0
        return sum
    def for_horiz(pgb):
        sum = pgb[0][2] + pgb[1][1] + pgb[2][0]
        if sum == 4:
            sum = 8
        if sum == 6:
            sum = 12
        if sum == 5:
            sum = 1
        if sum == 3 and pgb[0][0] == 2 and pgb[2][2] == 2:
            sum = 0
        return sum
    pgb = np.zeros((3,3))
    pgbf = np.zeros((3,3))
    for r in range(3):
        for c in range(3):
            if gb[r][c] == 'O':
                pgb[r][c] += 2
            if gb[r][c] == 'X':
                pgb[r][c] += 3
    for r in range(3):
        for c in range(3):
            if gb[r][c] == '-':
                pgbf[r][c] = row_sum(pgb, r)
                pgbf[r][c] += column_sum(pgb, c)
                if r == 0 and c == 0 or r == 1 and c == 1 or r == 2 and c == 2:
                    pgbf[r][c] += back_horiz(pgb)
                if r == 2 and c == 0 or r == 1 and c == 1 or r == 0 and c == 2:
                    pgbf[r][c] += for_horiz(pgb)
    pgbf[1][1] += 1
    #print(pgbf)
    pgbf = pgbf.reshape(9,1)
    max = np.argmax(pgbf)
    r = int(max/3)
    c = max%3
    gb[r][c] = "X"


def checkTermination(gb):
    termination = True
    tieOrWin = "tie"
    for row in gb:
        for column in row:
            if column == "-":
                termination = False
                tieOrWin = None
    if  gb[0][0] == gb[1][0] and gb[0][0] == gb[2][0] and gb[0][0] != '-' or \
        gb[0][1] == gb[1][1] and gb[0][1] == gb[2][1] and gb[0][1] != '-' or \
        gb[0][2] == gb[1][2] and gb[0][2] == gb[2][2] and gb[0][2] != '-' or \
        gb[0][0] == gb[0][1] and gb[0][0] == gb[0][2] and gb[0][0] != '-' or \
        gb[1][0] == gb[1][1] and gb[1][0] == gb[1][2] and gb[1][0] != '-' or \
        gb[2][0] == gb[2][1] and gb[2][0] == gb[2][2] and gb[2][0] != '-' or \
        gb[0][0] == gb[1][1] and gb[0][0] == gb[2][2] and gb[0][0] != '-' or \
        gb[2][0] == gb[1][1] and gb[2][0] == gb[0][2] and gb[2][0] != '-':
        termination = True
        tieOrWin = "win"
    return termination, tieOrWin

checkSolutions['project3p5'](checkTermination, createBoard())


def playGame():
    game_board = createBoard()
    whose_turn = 0
    terminate_game = False
    printGameBaord(game_board)
    while not terminate_game:
        print("----------------------")
        if whose_turn == 0:
            print("Users Turn")
            markBoardUser(game_board)
            whose_turn = 1
        else:
            print("CPU Turn")
            markBoardCPU(game_board)
            whose_turn = 0
        printGameBaord(game_board)
        terminate_game, tieOrWin = checkTermination(game_board)

    print("----------------------")
    if tieOrWin == "win":
        if whose_turn == 0:
            print("CPU Winner")
        else:
            print("Player Winner")
    else:
        print("Tie Game")
    printGameBaord(game_board)

playGame()


############################################################

lecture 17 ex 7 and 8 solutions

def ex7():
    print("Printing to the Terminal!")
    temp1 = sys.stdout
    f = open("../fileIO/out1.txt", 'w')
    sys.stdout = f
    print("Printing to the Out1.txt File!")
    f.close()
    sys.stdout = temp1
    print("Printing Back to the Terminal!")


def createBoard():
    game_board = []
    inputFile = open("../fileIO/ticTacToeBoard1.txt", 'r')
    data = inputFile.readlines()
    for d in data:
        game_board.append(d.replace("| ", "").replace("\n", "").replace(" ", "", 1).split(" "))
    return game_board

from solutions.ticTacToeSolution import ticTacToe
def playGameFromBoard():
    tTT = ticTacToe()
    game_board = createBoard()

    temp_out = sys.stdout
    sys.stdout = open("../fileIO/ticTacToeOut.txt", "w")

    tTT.playGame(game_board)

    sys.stdout.close()
    sys.stdout = temp_out

    print("Fixed the output!")


############################################################

lecture 18 solutions

def ex1():
    win = GraphWin("My Circle", 500, 500)  # name of window, width, height
    c = Circle(Point(250, 250), 100)
    c.setFill("lightblue")
    r = Rectangle(Point(150, 150), Point(350, 350))
    r.setFill("maroon")
    l = Line(Point(0, 0), Point(500, 500))
    l.setOutline("medium sea green")
    l.setWidth(3)
    r.draw(win)
    c.draw(win)
    l.draw(win)

    # Close window if the return/enter key is pressed
    while True:
        if win.checkKey() == "Return":
            win.close()
            break

    return win.items

#checkSolutions['example1'](ex1)


def ex2(RequestClose=True):
    win = GraphWin("My Track", 904, 564)  # name of window, width, height
    tc1 = Oval(Point(100, 100), Point(468, 464))
    tc2 = Oval(Point(436, 100), Point(804, 464))
    tr = Rectangle(Point(284, 100), Point(620, 464))
    l1 = Line(Point(284, 100), Point(620, 100))
    l2 = Line(Point(284, 464), Point(620, 464))
    tc1.setFill("IndianRed4")
    tc2.setFill("IndianRed4")
    tr.setFill("IndianRed4")
    tr.setOutline("IndianRed4")
    tc1.draw(win)
    tc2.draw(win)
    tr.draw(win)
    l1.draw(win)
    l2.draw(win)

    tc1w = Oval(Point(138, 138), Point(430, 426))
    tc2w = Oval(Point(474, 138), Point(766, 426))
    trw = Rectangle(Point(284, 138), Point(620, 426))
    l1w = Line(Point(284, 138), Point(620, 138))
    l2w = Line(Point(284, 426), Point(620, 426))

    tc1w.setFill("sea green")
    tc1w.setOutline("white")
    tc2w.setFill("sea green")
    tc2w.setOutline("white")
    trw.setFill("sea green")
    trw.setOutline("sea green")
    l1w.setFill("white")
    l2w.setFill("white")

    tc1w.draw(win)
    tc2w.draw(win)
    trw.draw(win)
    l1w.draw(win)
    l2w.draw(win)

    lf = Line(Point(284, 100), Point(284, 138))
    lf.setWidth(3)
    lf.draw(win)

    fin = Text(Point(284, 80), "Finish Line")
    fin.draw(win)

    sprintBox = Rectangle(Point(620, 100), Point(805, 138))
    sprintBox.setFill("IndianRed4")
    sprintBox.draw(win)

    sbl1 = Line(Point(620, 100), Point(620, 138))
    sbl2 = Line(Point(620, 138), Point(732, 138))
    sbl1.setFill("IndianRed4")
    sbl2.setFill("white")

    sbl1.draw(win)
    sbl2.draw(win)

    # Close window if the return/enter key is pressed
    while RequestClose:
        if win.checkKey() == "Return":
            win.close()
            break

    return win.items, win

# uncomment once you are working on example2
#checkSolutions['example2'](ex2)

def ex3(RequestClose=True):
    items, win = ex2(RequestClose=False)

    player = Circle(Point(824, 119), 16)
    player.setFill("NavajoWhite2")
    player.draw(win)

    player2 = Circle(Point(824, 119), 16)
    player2.setFill("black")
    player2.draw(win)


    i = 0
    while player2.getCenter().getX()+19 > 284:
        speed = -.2 * (i/(i+100))
        player2.move(speed, 0)

        player.move(-.2, 0)
        i += 1

    # Close window if the return/enter key is pressed
    while RequestClose:
        if win.checkKey() == "Return":
            win.close()
            break

    return items

#checkSolutions['example3'](ex3)


def delta_y(x, a, b):
    if x < 165:
        return -1*(b**2-b**2/a**2*x**2)**(-1/2)*b**2/a**2*x
    if x == 165:
        return np.inf
checkSolutions['example4dy'](delta_y)


def norm_grad(unnormalized_dy, y):
    if unnormalized_dy == None or unnormalized_dy == np.inf:
        if y < 0:
            return -.001, -.999
        else:
            return .001, -.999
    else:
        return -1*np.sign(y)*1/np.sqrt(unnormalized_dy**2 + 1), unnormalized_dy/np.sqrt(unnormalized_dy**2 + 1)

checkSolutions['example4normdy'](norm_grad, delta_y)


def ex4(RequestClose=True):
    items, win = ex2(RequestClose=False)

    player = Circle(Point(620, 445), 16)
    player.setFill("NavajoWhite2")
    player.draw(win)

    center = (620, 282)


    f = np.sqrt(165**2 -163**2)

    i = 0
    while player.getCenter().getY() > 119:
        speed = .1 * (i/(i+4000))
        x = player.getCenter().getX() - center[0]
        y = -1*(player.getCenter().getY() - center[1])
        dy = delta_y(x, 165, 163)  # always negative for x > 0
        dx, dy = norm_grad(dy, y)
        player.move(speed * dx, speed * dy)
        i += 1
    while player.getCenter().getX()+19 > 284:
        player.move(-speed, 0)

    # Close window if the return/enter key is pressed
    while RequestClose:
        if win.checkKey() == "Return":
            win.close()
            break

    return items

checkSolutions['example4'](ex4)

############################################################

############################################################
